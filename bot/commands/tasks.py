from telebot.formatting import escape_markdown
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton


from bot.logic.menu_navigation import show_tasks_submenu
from bot.models import Task, db
from bot.commands.pomodoro import run_pomodoro_cycle
from bot.commands.reminder import active_tasks
from bot.logic.logic import mark_task_as_done_logic, set_task_reminder_logic, delay_task_reminder_logic, create_task_logic, \
    set_task_priority_logic, get_active_tasks_page_logic

TASKS_PER_PAGE = 5
(GET_TASK_DESCRIPTION,
 ASK_PRIORITY,
 AWAIT_POMODORO_CONFIRM,
 AWAIT_REMINDER_CONFIRM,
 GET_REMINDER_TIME_CONV) = range(5)

PRIORITY_TEXT_MAP = {
    3: "–í–∏—Å–æ–∫–∏–π ‚¨ÜÔ∏è",
    2: "–°–µ—Ä–µ–¥–Ω—ñ–π ‚è∫Ô∏è",
    1: "–ù–∏–∑—å–∫–∏–π ‚¨áÔ∏è",
}

PRIORITY_ICONS = {
    3: "‚¨ÜÔ∏è",
    2: "‚è∫Ô∏è",
    1: "‚¨áÔ∏è",
    None: "‚ö™Ô∏è"
}

DEFAULT_PRIORITY_ICON = "‚ö™Ô∏è"
DEFAULT_PRIORITY_VALUE = 2


async def handle_menu_button_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ 'üìù –ó–∞–≤–¥–∞–Ω–Ω—è' –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await show_tasks_submenu(update, context)


async def received_task_description_conv_state(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    description_from_user = update.message.text.strip()

    if not description_from_user:
        await update.message.reply_text(
            "–û–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /cancel, —â–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏.")
        return GET_TASK_DESCRIPTION

    new_task_id, _task_desc_from_logic = create_task_logic(user_id, description_from_user, DEFAULT_PRIORITY_VALUE)

    if not new_task_id:
        await update.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ /cancel.")
        return ConversationHandler.END

    context.user_data['conv_task_id'] = new_task_id
    print(
        f"HANDLER (conv via button): –ó–∞–≤–¥–∞–Ω–Ω—è {new_task_id} –¥–æ–¥–∞–Ω–æ, –æ—á—ñ–∫—É—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç. user_data: {context.user_data}")

    default_prio_text = PRIORITY_TEXT_MAP.get(DEFAULT_PRIORITY_VALUE, "–°–µ—Ä–µ–¥–Ω—ñ–π")
    priority_keyboard = [
        [
            InlineKeyboardButton(PRIORITY_TEXT_MAP[3], callback_data="conv_prio:3"),
            InlineKeyboardButton(PRIORITY_TEXT_MAP[2], callback_data="conv_prio:2"),
            InlineKeyboardButton(PRIORITY_TEXT_MAP[1], callback_data="conv_prio:1"),
        ],
        [InlineKeyboardButton(f"üö´ –ó–∞–ª–∏—à–∏—Ç–∏ ({default_prio_text.split(' ')[0]})", callback_data="conv_prio:skip")]
    ]
    reply_markup = InlineKeyboardMarkup(priority_keyboard)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è ¬´{description_from_user}¬ª –¥–æ–¥–∞–Ω–æ (ID: {new_task_id}).\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=reply_markup
    )
    return ASK_PRIORITY


async def prompt_for_task_description_conv_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø–∏—Ç—É—î –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è, –∫–æ–ª–∏ —Ä–æ–∑–º–æ–≤–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è'."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:")
    return GET_TASK_DESCRIPTION


async def handle_tasks_submenu_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏ –∑ –ø—ñ–¥–º–µ–Ω—é –∑–∞–≤–¥–∞–Ω—å."""
    query = update.callback_query
    await query.answer()

    action = query.data.split(":")[1]

    if action == "list":
        await list_tasks_command(update, context)

    elif action == "add":
        pass
    else:
        try:
            await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –¥–ª—è –ø—ñ–¥–º–µ–Ω—é –∑–∞–≤–¥–∞–Ω—å.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–µ–≤—ñ–¥–æ–º—É –¥—ñ—é –ø—ñ–¥–º–µ–Ω—é: {e}")


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    user_id = update.effective_user.id
    is_callback = update.callback_query is not None

    tasks_on_page, total_tasks, num_pages = get_active_tasks_page_logic(user_id, page, TASKS_PER_PAGE)

    target_message_obj = update.message if not is_callback else update.callback_query.message

    if not tasks_on_page and page == 0:
        message_text = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å! üéâ"
        if target_message_obj:
            await target_message_obj.reply_text(message_text)
        return
    elif not tasks_on_page and page > 0:
        message_text = "–ë—ñ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î."
        if is_callback:
            await update.callback_query.answer(message_text)
        return

    header_info_raw = f"–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (–°—Ç–æ—Ä. {page + 1} –∑ {max(1, num_pages)})"
    header_info_escaped = escape_markdown(header_info_raw)

    prio_col_display_width = 3
    id_col_width = 1
    desc_col_width = 25
    rem_col_width = 12

    table_header_str = (
        f"{'–ü':<{prio_col_display_width}}"
        f"{'ID':<{id_col_width}}  "
        f"{'–ó–∞–≤–¥–∞–Ω–Ω—è':<{desc_col_width}}  "
        f"{'–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è':<{rem_col_width}}"
    )
    table_separator_str = (
        f"{'-' * (prio_col_display_width - 1)}-+"
        f"{'-' * (id_col_width)}-+-"
        f"{'-' * desc_col_width}-+-"
        f"{'-' * rem_col_width}"
    )
    task_lines_for_table = [table_header_str, table_separator_str]

    for t in tasks_on_page:
        prio_icon = PRIORITY_ICONS.get(t.priority, DEFAULT_PRIORITY_ICON)
        prio_cell = f"{prio_icon}".ljust(prio_col_display_width)
        id_cell = str(t.id).ljust(id_col_width)

        description_raw = t.description
        description_short = (description_raw[:desc_col_width - 3] + "...") if len(
            description_raw) > desc_col_width else description_raw
        desc_cell = escape_markdown(description_short).ljust(desc_col_width)

        reminder_text_raw = f"‚è∞{t.remind_at.strftime('%d.%m %H:%M')}" if t.remind_at else ""
        reminder_cell = escape_markdown(reminder_text_raw).ljust(rem_col_width)

        task_lines_for_table.append(
            f"{prio_cell}"
            f"{id_cell}  "
            f"{desc_cell}  "
            f"{reminder_cell}"
        )

    table_content = "\n".join(task_lines_for_table)
    message_text_final = f"{header_info_escaped}\n```\n{table_content}\n```"

    keyboard = []
    for t in tasks_on_page:
        keyboard.append([
            InlineKeyboardButton(f"‚úÖ {t.id}", callback_data=f"task:done:{t.id}"),
            InlineKeyboardButton(f"üìä {t.id}", callback_data=f"task:prio:{t.id}"),
            InlineKeyboardButton(f"‚è∞ {t.id}", callback_data=f"task:remind:{t.id}")
        ])

    pagination_row = []
    if page > 0:
        pagination_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=f"task:page:{page - 1}"))
    if (page + 1) * TASKS_PER_PAGE < total_tasks:
        pagination_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"task:page:{page + 1}"))

    if pagination_row:
        keyboard.append(pagination_row)

    reply_markup = InlineKeyboardMarkup(
        keyboard) if keyboard else None

    try:
        if is_callback:
            current_telegram_message = update.callback_query.message
            if current_telegram_message.text != message_text_final or current_telegram_message.reply_markup != reply_markup:
                await update.callback_query.edit_message_text(message_text_final, reply_markup=reply_markup,
                                                              parse_mode=ParseMode.MARKDOWN_V2)
            else:
                await update.callback_query.answer()
        else:
            await target_message_obj.reply_text(message_text_final, reply_markup=reply_markup,
                                                parse_mode=ParseMode.MARKDOWN_V2)
    except BadRequest as e:
        print(f"Telegram BadRequest –≤ list_tasks: {e}")
        await target_message_obj.reply_text("–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å.")
    except Exception as e:
        print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ list_tasks: {e}")
        await target_message_obj.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∑–∞–≤–¥–∞–Ω—å.")


async def list_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await list_tasks(update, context, page=0)


async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_id_str = None
    try:
        if context.args:
            task_id_str = context.args[0]
        elif update.message and update.message.text and update.message.text.startswith('/done_'):
            raw_id_part = update.message.text.split('_')[1]
            task_id_str = raw_id_part.split('$')[0] if '$' in raw_id_part else raw_id_part

        if not task_id_str:
            await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /done <–Ω–æ–º–µ—Ä_–∑–∞–≤–¥–∞–Ω–Ω—è> –∞–±–æ /done_<–Ω–æ–º–µ—Ä>")
            return

        task_id = int(task_id_str)
        task_obj, message = mark_task_as_done_logic(user_id, task_id)

        await update.message.reply_text(message)

    except (IndexError, ValueError):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞–≤–¥–∞–Ω–Ω—è.")
    except Exception as e:
        await update.message.reply_text(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ done: {e}")


async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_id = None
    remind_time_str = None

    try:
        if update.message.text.startswith('/remind_'):
            parts = update.message.text.split('_', 1)[1].split(' ', 1)
            task_id_from_text = parts[0].replace('$', '')
            if not task_id_from_text.isdigit():
                await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–∞–≤–¥–∞–Ω–Ω—è —É –∫–æ–º–∞–Ω–¥—ñ /remind_.")
                return
            task_id = int(task_id_from_text)
            if len(parts) > 1:
                remind_time_str = parts[1].strip()
        elif context.args and len(context.args) >= 1:
            if not context.args[0].isdigit():
                await update.message.reply_text("ID –∑–∞–≤–¥–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
                return
            task_id = int(context.args[0])
            if len(context.args) > 1:
                remind_time_str = ' '.join(context.args[1:])
        else:
            await update.message.reply_text(
                "–í–∫–∞–∂—ñ—Ç—å ID –∑–∞–≤–¥–∞–Ω–Ω—è.\n–ü—Ä–∏–∫–ª–∞–¥: /remind 1 15:30 –∞–±–æ /remind 1 <—á–∞—Å> –∞–±–æ /remind_1 <—á–∞—Å>"
            )
            return

        if remind_time_str is None:
            try:
                task_check_obj = db.session.query(Task).filter_by(id=task_id, user_id=user_id).first()
                if not task_check_obj:
                    await update.message.reply_text("–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–∞–ª–µ–∂–∏—Ç—å —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
                    return
                await update.message.reply_text(
                    f"–î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è {task_id} (¬´{task_check_obj.description}¬ª) –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å (HH:MM, dd.mm.YYYY HH:MM) –∞–±–æ 'off':"
                )
                context.chat_data['set_reminder_task_id'] = task_id
            except Exception as e_query:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ –ë–î –≤ set_reminder –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: {e_query}")
                await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—è.")
            finally:
                db.session.close()
            return

        _task_obj, message = set_task_reminder_logic(user_id, task_id, remind_time_str)
        await update.message.reply_text(message)

    except ValueError:
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π ID –∑–∞–≤–¥–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ set_reminder: {str(e)}")
        import traceback
        traceback.print_exc()


async def handle_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    try:
        data = query.data.split(":")
        action = data[0]
        task_id = int(data[1])

        from bot.models import db, Task
        task = db.session.query(Task).get(task_id)

        if not task:
            await query.edit_message_text("‚ö†Ô∏è –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        if action == "done":
            task_obj, message = mark_task_as_done_logic(user_id, task_id)
            await query.edit_message_text(text=message)
        elif action == "delay":
            await query.edit_message_text(
                "‚è± –ù–∞ —Å–∫—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?\n\n"
                "‚åõ –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM –∞–±–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω:")
            context.chat_data['delay_task_id'] = task_id
            context.chat_data['waiting_for_time'] = True
            print(
                f"DEBUG: handle_button (delay) - –í–°–¢–ê–ù–û–í–õ–ï–ù–û delay_task_id: {task_id} —É chat_data: {context.chat_data}")
            context.chat_data['delay_task_id'] = task_id
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")


async def handle_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    current_page = 0
    if query.message and query.message.text and "–°—Ç–æ—Ä." in query.message.text:
        try:
            page_str = query.message.text.split("–°—Ç–æ—Ä. ")[1].split(" –∑")[0]
            current_page = int(page_str) - 1
        except Exception as e_page:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e_page}")

    parts = query.data.split(":")
    action = parts[1]
    target_id_str = parts[2] if len(parts) > 2 else None

    if action == "page":
        if target_id_str is None:
            await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.")
            return
        try:
            page = int(target_id_str)
            await list_tasks(update, context, page=page)
        except ValueError:
            await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –≤ handle_task_button: {e}")
            await query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ñ–Ω—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É.")
        return

    if target_id_str is None:
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞: ID –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ.")
        return

    try:
        task_id = int(target_id_str)
    except ValueError:
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞: ID –∑–∞–≤–¥–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return

    if action == "remind":
        try:
            task_for_remind = Task.query.filter_by(id=task_id, user_id=user_id).first()
            if not task_for_remind:
                await query.edit_message_text("‚ö†Ô∏è –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            else:
                context.chat_data['remind_task_id_from_button'] = task_id
                print(
                    f"DEBUG handle_task_button (remind): –í–°–¢–ê–ù–û–í–õ–ï–ù–û remind_task_id_from_button: {task_id}, chat_data: {context.chat_data}")
                await query.message.reply_text(
                    f"–î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{task_for_remind.description}¬ª (ID: {task_for_remind.id}) –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (HH:MM –∞–±–æ dd.mm.YYYY HH:MM):"
                )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ 'remind' –≥—ñ–ª—Ü—ñ handle_task_button: {e}")
            await query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")
        finally:
            db.session.close()
        return

    elif action == "skip_done_pom":
        try:
            task_skipped = Task.query.filter_by(id=task_id, user_id=user_id).first()
            desc = task_skipped.description if task_skipped else f"ID {task_id}"
            await query.edit_message_text(f"–ì–∞—Ä–∞–∑–¥, –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{desc}¬ª –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–∏–º.")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –≤ 'skip_done_pom' –≥—ñ–ª—Ü—ñ handle_task_button: {e}")
            await query.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
        finally:
            db.session.close()
        return

    if action == "done" or action == "done_pom_end":
        task_obj, message = mark_task_as_done_logic(user_id, task_id)

        if action == "done":
            if task_obj:
                await query.answer(f"–ó–∞–≤–¥–∞–Ω–Ω—è ¬´{task_obj.description}¬ª –æ–±—Ä–æ–±–ª–µ–Ω–æ!")
                await list_tasks(update, context, page=current_page)
            else:
                await query.edit_message_text(message)

        elif action == "done_pom_end":
            await query.edit_message_text(message)
        return

    try:
        await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ '–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è' –≤ handle_task_button: {e}")


async def handle_reminder_time_input_conv(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    task_id = context.user_data.pop('conv_task_id', None)
    print(f"--- DEBUG: handle_reminder_time_input_conv - –û—Ç—Ä–∏–º–∞–Ω–æ task_id: {task_id} –∑ user_data ---")

    if not task_id:
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (conv). –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    remind_time_str = update.message.text.strip()

    task_obj, message = set_task_reminder_logic(user_id, task_id, remind_time_str)
    await update.message.reply_text(message)

    if task_obj and "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É" in message :
        context.user_data['conv_task_id'] = task_id
        return GET_REMINDER_TIME_CONV

    return ConversationHandler.END


async def handle_reminder_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"--- DEBUG: handle_reminder_time_input –ó–ê–ü–£–©–ï–ù–û, –ø–æ—Ç–æ—á–Ω–∏–π chat_data: {context.chat_data} ---")
    actual_task_id = None

    if 'remind_task_id_from_button' in context.chat_data:
        actual_task_id = context.chat_data.pop('remind_task_id_from_button')
        print(f"--- DEBUG: handle_reminder_time_input - popped 'remind_task_id_from_button': {actual_task_id}")
    elif 'set_reminder_task_id' in context.chat_data:
        actual_task_id = context.chat_data.pop('set_reminder_task_id')
        print(f"--- DEBUG: handle_reminder_time_input - popped 'set_reminder_task_id': {actual_task_id}")

    if not actual_task_id:
        return

    user_id = update.effective_user.id
    remind_time_str = update.message.text.strip()

    task_obj, message = set_task_reminder_logic(user_id, actual_task_id, remind_time_str)
    await update.message.reply_text(message)

    if task_obj and "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É" in message:
        print(f"--- DEBUG: handle_reminder_time_input - –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è task_id {actual_task_id}. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.")


async def handle_delay_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("!!!!!!!!!!!! DEBUG: handle_delay_time_input –ó–ê–ü–£–©–ï–ù–û !!!!!!!!!!!!")
    task_id_from_chat = context.chat_data.pop('delay_task_id', None)
    print(f"!!!!!!!!!!!! DEBUG: handle_delay_time_input - delay_task_id from chat_data: {task_id_from_chat}")

    if not task_id_from_chat:
        print("!!!!!!!!!!!! DEBUG: handle_delay_time_input - delay_task_id –ù–ï –ó–ù–ê–ô–î–ï–ù–û, –≤–∏—Ö—ñ–¥ (return)")
        return

    user_input_delay = update.message.text.strip()
    user_id = update.effective_user.id

    task_obj, message = delay_task_reminder_logic(user_id, task_id_from_chat, user_input_delay)
    await update.message.reply_text(message)

    if task_obj and "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç" not in message:
        if task_id_from_chat in active_tasks:
            active_tasks.remove(task_id_from_chat)
            print(f"DEBUG: handle_delay_time_input - –ó–∞–≤–¥–∞–Ω–Ω—è {task_id_from_chat} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ active_tasks")
        context.chat_data.pop('waiting_for_time', None)
    elif "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç" in message:
        context.chat_data['delay_task_id'] = task_id_from_chat
        print(f"DEBUG: handle_delay_time_input - –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–≤–µ—Ä–Ω—É—Ç–æ delay_task_id: {task_id_from_chat}")


async def add_task_conversation_starter(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ—á–∏–Ω–∞—î —Ä–æ–∑–º–æ–≤—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É."""
    user_id = update.effective_user.id
    args = context.args

    if not args:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è –ø—ñ—Å–ª—è /add.\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /add –ó—Ä–æ–±–∏—Ç–∏ –≤–∞–∂–ª–∏–≤—É —Å–ø—Ä–∞–≤—É")
        return ConversationHandler.END

    description = ' '.join(args)

    new_task = create_task_logic(user_id, description, DEFAULT_PRIORITY_VALUE)
    if not new_task or not new_task.id:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END

    context.user_data['conv_task_id'] = new_task.id
    print(f"HANDLER: –ó–∞–≤–¥–∞–Ω–Ω—è {new_task.id} –¥–æ–¥–∞–Ω–æ (–∑ –ª–æ–≥—ñ–∫–∏), –æ—á—ñ–∫—É—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç. user_data: {context.user_data}")

    priority_keyboard = [
        [
            InlineKeyboardButton(PRIORITY_TEXT_MAP[3], callback_data="conv_prio:3"),
            InlineKeyboardButton(PRIORITY_TEXT_MAP[2], callback_data="conv_prio:2"),
            InlineKeyboardButton(PRIORITY_TEXT_MAP[1], callback_data="conv_prio:1"),
        ],
        [InlineKeyboardButton(f"üö´ –ó–∞–ª–∏—à–∏—Ç–∏ {PRIORITY_TEXT_MAP.get(DEFAULT_PRIORITY_VALUE, '–°–µ—Ä–µ–¥–Ω—ñ–π')}", callback_data="conv_prio:skip")]
    ]
    reply_markup = InlineKeyboardMarkup(priority_keyboard)
    await update.message.reply_text(
        f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è ¬´{description}¬ª –¥–æ–¥–∞–Ω–æ (ID: {new_task.id}).\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç:",
        reply_markup=reply_markup
    )
    return ASK_PRIORITY


async def handle_priority_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    task_id = context.user_data.get('conv_task_id')
    if not task_id:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: ID –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ—Å—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    chosen_priority_data = query.data.split(":")[1]
    next_state = ConversationHandler.END

    task_description_for_reply = "–Ω–µ–≤—ñ–¥–æ–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è"
    task_current_priority_for_suggestion = DEFAULT_PRIORITY_VALUE

    if chosen_priority_data == "skip":
        try:
            task_obj_skipped = db.session.query(Task).filter_by(id=task_id, user_id=user_id).first()
            if task_obj_skipped:
                task_description_for_reply = task_obj_skipped.description
                task_current_priority_for_suggestion = task_obj_skipped.priority
            priority_display_text = PRIORITY_TEXT_MAP.get(task_current_priority_for_suggestion, "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            await query.edit_message_text(
                f"–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{task_description_for_reply}¬ª –Ω–µ –∑–º—ñ–Ω–µ–Ω–æ (–∑–∞–ª–∏—à–∏–≤—Å—è '{priority_display_text}').")
        except Exception as e_skip:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è skip –≤ handle_priority_selection: {e_skip}")
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—è.")
            context.user_data.pop('conv_task_id', None)
            return ConversationHandler.END
        finally:
            db.session.close()
    else:
        priority_value = int(chosen_priority_data)
        _updated_task_obj, returned_description, returned_priority = set_task_priority_logic(user_id, task_id,
                                                                                             priority_value)

        if not _updated_task_obj:
            error_message_from_logic = returned_description or "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –∑–∞–≤–¥–∞–Ω–Ω—è."
            await query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞: {error_message_from_logic}")
            context.user_data.pop('conv_task_id', None)
            return ConversationHandler.END

        task_description_for_reply = returned_description
        task_current_priority_for_suggestion = returned_priority
        priority_display_text = PRIORITY_TEXT_MAP.get(task_current_priority_for_suggestion, "–ù–µ–≤—ñ–¥–æ–º–∏–π")

        await query.edit_message_text(
            f"–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{task_description_for_reply}¬ª –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {priority_display_text}.")

    if task_current_priority_for_suggestion == 3:
        pom_keyboard = [[
            InlineKeyboardButton("üöÄ –¢–∞–∫, –ø–æ—á–∞—Ç–∏ Pomodoro", callback_data=f"conv_sugg:pom_yes:{task_id}"),
            InlineKeyboardButton("‚ûñ –ù—ñ, –¥—è–∫—É—é", callback_data=f"conv_sugg:pom_no:{task_id}")
        ]]
        await query.message.reply_text(
            f"–ó–∞–≤–¥–∞–Ω–Ω—è ¬´{task_description_for_reply}¬ª –≤–∏—Å–æ–∫–æ–≥–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É. –†–æ–∑–ø–æ—á–∞—Ç–∏ Pomodoro –∑–∞—Ä–∞–∑?",
            reply_markup=InlineKeyboardMarkup(pom_keyboard)
        )
        next_state = AWAIT_POMODORO_CONFIRM
    elif task_current_priority_for_suggestion in [1, 2]:
        rem_keyboard = [[
            InlineKeyboardButton("‚è∞ –¢–∞–∫, –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", callback_data=f"conv_sugg:rem_yes:{task_id}"),
            InlineKeyboardButton("‚ûñ –ù—ñ, –¥—è–∫—É—é", callback_data=f"conv_sugg:rem_no:{task_id}")
        ]]
        await query.message.reply_text(
            f"–î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{task_description_for_reply}¬ª –±–∞–∂–∞—î—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è?",
            reply_markup=InlineKeyboardMarkup(rem_keyboard)
        )
        next_state = AWAIT_REMINDER_CONFIRM
    else:
        next_state = ConversationHandler.END

    if next_state == ConversationHandler.END:
        context.user_data.pop('conv_task_id', None)

    return next_state


async def handle_pomodoro_confirm(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    chat_id = query.message.chat_id

    task_id = context.user_data.pop('conv_task_id', None)

    action_data = query.data.split(":")[1]

    if not task_id:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è Pomodoro.")
        return ConversationHandler.END

    if action_data == "pom_yes":
        pom_data = context.user_data.setdefault('pomodoro', {})
        if pom_data.get('state', 'idle') != 'idle' and pom_data.get('state') is not None:
            await query.message.reply_text("Pomodoro –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ. –ó—É–ø–∏–Ω—ñ—Ç—å –ø–æ—Ç–æ—á–Ω–∏–π, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π.")
        else:
            pom_data.clear()
            pom_data['state'] = 'idle'
            pom_data['pomodoros_done'] = 0
            pom_data['linked_task_id'] = task_id
            pom_data['current_session_id'] = None

            task_obj = Task.query.get(task_id)
            task_desc = task_obj.description if task_obj else f"ID {task_id}"
            db.session.close()

            context.job_queue.run_once(
                run_pomodoro_cycle,
                0,
                chat_id=chat_id,
                user_id=user_id,
                name=f"pomodoro_timer_{chat_id}",
                data={'chat_id': chat_id}
            )
            await query.edit_message_text(f"üöÄ Pomodoro –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{task_desc}¬ª –∑–∞–ø—É—â–µ–Ω–æ!")
    else:
        await query.edit_message_text("–ì–∞—Ä–∞–∑–¥, Pomodoro –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ.")

    return ConversationHandler.END


async def handle_reminder_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    task_id = context.user_data.get('conv_task_id')

    if not task_id:
        await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")
        return ConversationHandler.END

    action_data = query.data.split(":")[1]
    if action_data == "rem_yes":
        task = Task.query.get(task_id)
        task_desc = task.description if task else f"ID {task.id}"
        db.session.close()
        await query.edit_message_text(
            f"–î–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è ¬´{task_desc}¬ª –≤–≤–µ–¥—ñ—Ç—å —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (HH:MM –∞–±–æ dd.mm.YYYY HH:MM):")
        return GET_REMINDER_TIME_CONV
    else:
        await query.edit_message_text("–ì–∞—Ä–∞–∑–¥, –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        context.user_data.pop('conv_task_id', None)
        return ConversationHandler.END
