from datetime import datetime, timedelta
from telegram import Bot, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.request import HTTPXRequest
from config import BOT_TOKEN
from bot.models import db, Task
import asyncio

bot = Bot(token=BOT_TOKEN, request=HTTPXRequest(connection_pool_size=10))
reminder_loop = asyncio.new_event_loop()
asyncio.set_event_loop(reminder_loop)
queue = asyncio.Queue()
active_tasks = set()


async def worker():

    while True:
        task = await queue.get()
        try:
            if task.id in active_tasks:
                continue

            active_tasks.add(task.id)

            if not task.reminder_sent:
                await send_first_reminder(task)
            elif not task.follow_up_sent and datetime.utcnow() >= task.follow_up_time:
                await send_follow_up(task)

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è {task.id}: {e}")
        finally:
            queue.task_done()


async def send_first_reminder(task):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"done:{task.id}"),
            InlineKeyboardButton("‚è± –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"delay:{task.id}")
        ]
    ])
    await bot.send_message(
        chat_id=task.user_id,
        text=f"‚è∞‚ùì –í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ '{task.description}'?",
        reply_markup=keyboard
    )
    task.reminder_sent = True
    task.follow_up_time = datetime.utcnow() + timedelta(hours=3)
    db.session.commit()


async def send_follow_up(task):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
    await bot.send_message(
        chat_id=task.user_id,
        text=f"‚ùì –í–∏ –≤–∏–∫–æ–Ω–∞–ª–∏ '{task.description}'?",
        reply_markup=ReplyKeyboardMarkup([
            ["‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", "‚è± –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ 1 –≥–æ–¥", "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ 3 –≥–æ–¥"]
        ], one_time_keyboard=True)
    )
    task.follow_up_sent = True
    db.session.commit()


def check_reminders():
    """–ü–æ—à—É–∫ —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å —É —á–µ—Ä–≥—É"""
    try:
        now = datetime.now()
        print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –æ {now}")

        first_reminders = db.session.query(Task).filter(
            Task.remind_at <= now,
            Task.reminder_sent.is_(False)
        ).all()

        follow_ups = db.session.query(Task).filter(
            Task.follow_up_time <= now,
            Task.follow_up_sent.is_(False),
            Task.reminder_sent.is_(True)
        ).all()
        print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(first_reminders)} –ø–µ—Ä—à–∏—Ö —Ç–∞ {len(follow_ups)} –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")

        for task in first_reminders + follow_ups:
            asyncio.run_coroutine_threadsafe(queue.put(task), reminder_loop)

        print(f"–î–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏: {len(first_reminders)} –ø–µ—Ä—à–∏—Ö —Ç–∞ {len(follow_ups)} –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {e}")
    finally:
        db.session.close()
