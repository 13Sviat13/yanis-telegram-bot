import datetime
from telegram.helpers import escape_markdown
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import ContextTypes, ConversationHandler
from telegram import Update

from bot.commands.content import get_structured_focus_tip
from bot.logic.logic import get_statistics_logic
from bot.commands.pomodoro import WORK_DURATION_MIN
from bot.logic.menu_navigation import send_main_menu


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.effective_user.first_name
    await send_main_menu(update, context,
                         message_text=f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –Ø–Ω—ñ—Å, –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.\n–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")


async def fallback_in_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥–∞—î—Ç—å—Å—è, –º–∏ –∑–∞—Ä–∞–∑ —â–æ—Å—å –æ–±–≥–æ–≤–æ—Ä—é–≤–∞–ª–∏. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ü–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /cancel –∞–±–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.")


async def tip_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—É –ø–æ—Ä–∞–¥—É –∑ —Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è."""
    tip_article = get_structured_focus_tip()

    internal_error_phrases = [
        "–ü–æ–º–∏–ª–∫–∞: –í—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç",
        "–ü–æ–º–∏–ª–∫–∞: –î–µ—Ç–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
        "–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É",
        "–ù–∞ –∂–∞–ª—å, –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑–∞—Ä–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ",
        "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ",
        "–í–∏–±–∞—á—Ç–µ, –ø–æ—Ä–∞–¥–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ"
    ]

    is_internal_error_message = any(phrase in tip_article for phrase in internal_error_phrases)

    if is_internal_error_message:
        await update.message.reply_text(tip_article)
    else:
        try:
            await update.message.reply_text(tip_article, parse_mode=ParseMode.MARKDOWN_V2)
        except BadRequest as e:
            print(f"Telegram BadRequest –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑ MarkdownV2: {e}")
            print(f"–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Ä–∞–¥–∏ –±—É–≤:\n{tip_article}")
            await update.message.reply_text(
                "–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤–µ–ª–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è–º –ø–æ—Ä–∞–¥–∏. –û—Å—å –≤–æ–Ω–∞ —É –ø—Ä–æ—Å—Ç–æ–º—É –≤–∏–≥–ª—è–¥—ñ:\n\n" + tip_article
            )
        except Exception as e:
            print(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ tip_command: {e}")

            await update.message.reply_text("–û–π, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –ø–æ—Ä–∞–¥–∏.")


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–∫–∞—Å–æ–≤—É—î –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑–º–æ–≤—É (—è–∫—â–æ –≤–æ–Ω–∞ —î)."""
    keys_to_pop = ['conv_task_id']
    cleaned_any = False
    for key in keys_to_pop:
        if key in context.user_data:
            context.user_data.pop(key, None)
            cleaned_any = True
    if cleaned_any:
        await update.message.reply_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:

        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    return ConversationHandler.END


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now_display_raw = datetime.datetime.now(datetime.timezone.utc).strftime('%d.%m.%Y')
    now_display_escaped = escape_markdown(now_display_raw, version=2)

    stats = get_statistics_logic(user_id)

    if not stats:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    header_text = f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* \\({now_display_escaped}\\) üìä"
    message_parts = [header_text + "\n"]

    message_parts.append(
        f"*–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å:*\n"  
        f"  \\- –°—å–æ–≥–æ–¥–Ω—ñ: {stats.get('tasks_today', 0)}\n"
        f"  \\- –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è: {stats.get('tasks_week', 0)}\n"
        f"  \\- –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: {stats.get('tasks_month', 0)}\n"
    )

    tpw_minutes = (stats.get('total_pomodoros_week', 0) * WORK_DURATION_MIN)
    tpm_minutes = (stats.get('total_pomodoros_month', 0) * WORK_DURATION_MIN)
    message_parts.append(
        f"\n*–ó–∞–≤–µ—Ä—à–µ–Ω–æ Pomodoro \\(—Ä–æ–±–æ—á–∏—Ö, –∑–∞–≥–∞–ª–æ–º\\):*\n"
        f"  \\- –°—å–æ–≥–æ–¥–Ω—ñ: {stats.get('total_pomodoros_today', 0)}\n"
        f"  \\- –¶—å–æ–≥–æ —Ç–∏–∂–Ω—è: {stats.get('total_pomodoros_week', 0)} \\(‚âà {tpw_minutes // 60} –≥–æ–¥ {tpw_minutes % 60} —Ö–≤\\)\n"
        f"  \\- –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: {stats.get('total_pomodoros_month', 0)} \\(‚âà {tpm_minutes // 60} –≥–æ–¥ {tpm_minutes % 60} —Ö–≤\\)\n"
    )

    completed_pom_per_task = stats.get('completed_pomodoros_per_task', [])
    if completed_pom_per_task:
        message_parts.append("\n*–ó–∞–≤–µ—Ä—à–µ–Ω—ñ Pomodoro –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—è—Ö \\(—Ç–æ–ø\\-5\\):*")
        for desc_raw, count in completed_pom_per_task:
            desc_escaped = escape_markdown(desc_raw or "–ù–µ–≤—ñ–¥–æ–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è", version=2)
            focus_time_minutes = count * WORK_DURATION_MIN
            message_parts.append(
                f"  \\- ¬´{desc_escaped}¬ª: {count} —Å–µ—Å—ñ–π \\(‚âà {focus_time_minutes // 60} –≥–æ–¥ {focus_time_minutes % 60} —Ö–≤\\)"
            )

    tsmw_minutes = stats.get('total_stopped_minutes_week', 0)
    message_parts.append(
        f"\n*–ü–µ—Ä–µ—Ä–≤–∞–Ω–æ Pomodoro \\(—Ä–æ–±–æ—á–∏—Ö, —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è\\):*\n"
        f"  \\- –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {stats.get('stopped_pom_count_week', 0)}\n"
        f"  \\- –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Ç—Ä–∞—á–µ–Ω–∏–π —á–∞—Å: ‚âà {tsmw_minutes // 60} –≥–æ–¥ {tsmw_minutes % 60} —Ö–≤"
    )

    final_message = "\n".join(message_parts)

    try:
        await update.message.reply_text(final_message, parse_mode=ParseMode.MARKDOWN_V2)
    except BadRequest as e_stats_br:
        print(f"–ü–æ–º–∏–ª–∫–∞ Markdown –≤ show_stats –ü–Ü–°–õ–Ø –í–ò–ü–†–ê–í–õ–ï–ù–¨: {e_stats_br}")
        print(f"–ü—Ä–æ–±–ª–µ–º–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{final_message}")
        plain_text_parts = [f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({now_display_raw})\n"]
        plain_text_parts.append(f"–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å:\n  - –°—å–æ–≥–æ–¥–Ω—ñ: {stats.get('tasks_today', 0)}\n  - ...")
        await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e_stats:
        print(f"–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ show_stats: {e_stats}")
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_main_menu(update, context, message_text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:")


async def handle_menu_button_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_stats(update, context)


async def handle_menu_button_tip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await tip_command(update, context)
