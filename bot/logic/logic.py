import re
from datetime import datetime, timedelta, timezone

from sqlalchemy import func

from bot.models import db, Task, JournalEntry, MoodEntry, PomodoroSession

ENTRY_TYPE_CONFIG_LOGIC = {
    "idea": {"model": JournalEntry, "display_name": "–Ü–¥–µ—è"},
    "thought": {"model": JournalEntry, "display_name": "–î—É–º–∫–∞"},
    "dream": {"model": JournalEntry, "display_name": "–°–æ–Ω"},
    "note": {"model": JournalEntry, "display_name": "–ó–∞–º—ñ—Ç–∫–∞"},
    "mood": {"model": MoodEntry, "display_name": "–ó–∞–ø–∏—Å –ø—Ä–æ –Ω–∞—Å—Ç—Ä—ñ–π"}
}


def mark_task_as_done_logic(user_id: int, task_id: int) -> tuple[Task | None, str]:
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞ ID —Ç–∞ user_id, –ø–æ–∑–Ω–∞—á–∞—î –π–æ–≥–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î completed_at, reminder_sent, follow_up_sent.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂: (–æ–±'—î–∫—Ç –∑–∞–≤–¥–∞–Ω–Ω—è, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö/–ø–æ–º–∏–ª–∫—É).
    """
    message = ""
    task_obj = None
    try:
        task_obj = Task.query.filter_by(id=task_id, user_id=user_id).first()

        if not task_obj:
            message = "–¢–∞–∫–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –≤–æ–Ω–æ –Ω–∞–ª–µ–∂–∏—Ç—å —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É."
            return None, message

        if task_obj.completed:
            message = f"‚òëÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è ¬´{task_obj.description}¬ª –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ–Ω–∞–Ω–µ."
            return task_obj, message

        task_obj.completed = True
        task_obj.completed_at = datetime.utcnow()
        task_obj.reminder_sent = True
        task_obj.follow_up_sent = True
        db.session.commit()
        message = f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è ¬´{task_obj.description}¬ª —É—Å–ø—ñ—à–Ω–æ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!"
        print(f"LOGIC: –ó–∞–≤–¥–∞–Ω–Ω—è {task_id} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ.")
        return task_obj, message
    except Exception as e:
        db.session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ mark_task_as_done_logic –¥–ª—è task_id {task_id}: {e}")
        message = f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: {e}"
        return None, message
    finally:
        db.session.close()


def set_task_reminder_logic(user_id: int, task_id: int, remind_time_str: str | None) -> tuple[Task | None, str]:
    """
    –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∞–±–æ –≤–∏–º–∏–∫–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è.
    –ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤–≤–µ–¥–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å –≤ UTC –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–æ—Ä—Ç–µ–∂: (–æ–±'—î–∫—Ç –∑–∞–≤–¥–∞–Ω–Ω—è, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç).
    """
    session = db.session
    try:
        task = session.query(Task).filter_by(id=task_id, user_id=user_id).first()
        if not task:
            return None, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        if not remind_time_str or remind_time_str.strip().lower() == 'off':
            task.remind_at = None
            task.reminder_sent = False
            task.follow_up_sent = False
            session.commit()
            return task, "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ."

        parsed_local_naive = None
        if ' ' in remind_time_str.strip():
            try:
                parsed_local_naive = datetime.strptime(remind_time_str.strip(), '%d.%m.%Y %H:%M')
            except ValueError:
                try:
                    parsed_local_naive = datetime.strptime(remind_time_str.strip(), '%Y-%m-%d %H:%M')
                except ValueError:
                    raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É.")
        else:
            remind_time_obj = datetime.strptime(remind_time_str.strip(), '%H:%M').time()
            now_local = datetime.now()
            parsed_local_naive = datetime.combine(now_local.date(), remind_time_obj)
            if parsed_local_naive < now_local:
                parsed_local_naive += timedelta(days=1)

        if parsed_local_naive:
            if parsed_local_naive.tzinfo is None:
                local_aware = parsed_local_naive.astimezone()
            else:
                local_aware = parsed_local_naive

            utc_aware = local_aware.astimezone(timezone.utc)
            task.remind_at = utc_aware.replace(tzinfo=None)

            task.reminder_sent = False
            task.follow_up_sent = False
            session.commit()
            return task, f"‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è ¬´{task.description}¬ª –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {parsed_local_naive.strftime('%d.%m.%Y %H:%M')} (–≤–∞—à –º—ñ—Å—Ü–µ–≤–∏–π —á–∞—Å)."
        else:
            return task, "–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —á–∞—Å—É."

    except ValueError as ve:
        return None, f"‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É: {ve}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM, dd.mm.YYYY HH:MM –∞–±–æ YYYY-MM-DD HH:MM."
    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ set_task_reminder_logic –¥–ª—è task_id {task_id}: {e}")
        return None, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}"
    finally:
        session.close()


def delay_task_reminder_logic(user_id: int, task_id: int, user_input_delay: str) -> tuple[Task | None, str]:
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è. –ö–æ–Ω–≤–µ—Ä—Ç—É—î –≤ UTC."""
    session = db.session
    try:
        task = session.query(Task).filter_by(id=task_id, user_id=user_id).first()
        if not task:
            return None, "‚ö†Ô∏è –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        new_local_naive_time = None
        time_str_for_reply = ""

        if user_input_delay.isdigit():
            hours = int(user_input_delay)
            new_local_naive_time = datetime.now() + timedelta(hours=hours)
            time_str_for_reply = f"{hours} –≥–æ–¥–∏–Ω(–∏)"
        else:
            try:
                input_time_obj = datetime.strptime(user_input_delay, "%H:%M").time()
                now_local = datetime.now()
                new_local_naive_time = datetime.combine(now_local.date(), input_time_obj)
                if new_local_naive_time < now_local:
                    new_local_naive_time += timedelta(days=1)
                time_str_for_reply = new_local_naive_time.strftime("%H:%M (%d.%m)")
            except ValueError:
                return task, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–≥–æ–¥–∏–Ω–∏) –∞–±–æ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM"

        if new_local_naive_time:
            local_aware = new_local_naive_time.astimezone()
            utc_aware = local_aware.astimezone(timezone.utc)
            task.remind_at = utc_aware.replace(tzinfo=None)

            task.reminder_sent = False
            task.follow_up_sent = False
            session.commit()
            return task, f"üîÅ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ {time_str_for_reply}."
        else:
            return task, "–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–æ–≤–æ–≥–æ —á–∞—Å—É –¥–ª—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è."

    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ delay_task_reminder_logic –¥–ª—è task_id {task_id}: {e}")
        return None, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ñ: {str(e)}"
    finally:
        session.close()


def update_pomodoro_session_db(session_id: int | None, status: str,
                               end_time_utc: datetime | None = None) -> PomodoroSession | None:
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ç–∞/–∞–±–æ —á–∞—Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó —Å–µ—Å—ñ—ó Pomodoro –≤ –ë–î."""
    if not session_id:
        return None

    session_db_obj = None
    session = db.session
    try:
        session_db_obj = session.query(PomodoroSession).get(session_id)
        if session_db_obj:
            session_db_obj.status = status
            session_db_obj.end_time = end_time_utc if end_time_utc else datetime.now(timezone.utc).replace(
                tzinfo=None)
            session.commit()
            print(f"LOGIC: Pomodoro —Å–µ—Å—ñ—è {session_id} –æ–Ω–æ–≤–ª–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}")
            return session_db_obj
        else:
            print(f"LOGIC WARNING: Pomodoro —Å–µ—Å—ñ—è {session_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")
            return None
    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ update_pomodoro_session_db –¥–ª—è session_id {session_id}: {e}")
        return None
    finally:
        session.close()


def create_pomodoro_session_db(user_id: int, duration_minutes: int, session_type: str,
                               task_id: int | None = None) -> int | None:
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Å–µ—Å—ñ—é Pomodoro –≤ –ë–î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—ó ID."""
    session = db.session
    try:
        new_pom_session = PomodoroSession(
            user_id=user_id,
            task_id=task_id,
            duration_minutes=duration_minutes,
            session_type=session_type,
            status='started',
            start_time=datetime.now(timezone.utc).replace(tzinfo=None)
        )
        session.add(new_pom_session)
        session.commit()
        print(f"LOGIC: –°—Ç–≤–æ—Ä–µ–Ω–æ Pomodoro —Å–µ—Å—ñ—é {new_pom_session.id} –¥–ª—è user {user_id}, task_id: {task_id}")
        return new_pom_session.id
    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ create_pomodoro_session_db: {e}")
        return None
    finally:
        session.close()


def save_generic_entry_logic(
        user_id: int,
        command: str,
        full_content_input: str) -> tuple[object | None, str, list[str] | None, str | None]:

    session = db.session
    created_entry_obj = None
    message_for_user = ""
    parsed_tags_list = []
    text_for_mood_analysis = None

    config = ENTRY_TYPE_CONFIG_LOGIC.get(command)
    if not config:
        return None, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∑–∞–ø–∏—Å—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.", None, None

    entry_model = config["model"]
    display_entry_type_for_msg = config["display_name"]
    entry_type_for_db = command  # "idea", "thought", "dream", "mood"

    rating = None
    text_content_for_db = full_content_input

    try:
        if entry_type_for_db == "mood":
            mood_args = full_content_input.split(' ', 1)
            if mood_args and mood_args[0].isdigit():
                potential_rating = int(mood_args[0])
                if 1 <= potential_rating <= 5:
                    rating = potential_rating
                    text_content_for_db = mood_args[1].strip() if len(mood_args) > 1 else ""

            if rating is None and not text_content_for_db.strip():
                return None, f"–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–ª—è /{command} –¥–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –Ω–∞—Å—Ç—Ä–æ—é –∞–±–æ –æ—Ü—ñ–Ω–∫—É (1-5).", None, None

        parsed_tags_list = re.findall(r"#(\w+)", full_content_input)
        tags_str_for_db = ",".join(sorted(list(set(parsed_tags_list)))) if parsed_tags_list else None

        entry_data = {
            "user_id": user_id,
            "created_at": datetime.now(timezone.utc).replace(tzinfo=None)
        }

        if entry_model == JournalEntry:
            entry_data["entry_type"] = entry_type_for_db
            entry_data["content"] = text_content_for_db
            entry_data["tags_str"] = tags_str_for_db
        elif entry_model == MoodEntry:
            entry_data["rating"] = rating
            entry_data["text"] = text_content_for_db if text_content_for_db.strip() else None
            entry_data["tags_str"] = tags_str_for_db
            text_for_mood_analysis = text_content_for_db

        new_entry = entry_model(**entry_data)
        session.add(new_entry)
        session.commit()
        created_entry_obj = new_entry

        message_parts = [f"{display_entry_type_for_msg} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"]
        if entry_model == MoodEntry and rating:
            message_parts.append(f"–û—Ü—ñ–Ω–∫–∞: {rating}/5")

        text_in_confirmation = text_content_for_db
        if text_in_confirmation and text_in_confirmation.strip():
            display_text_confirm = text_in_confirmation[:100] + "..." if len(
                text_in_confirmation) > 100 else text_in_confirmation
            message_parts.append(f"–ó–∞–ø–∏—Å: ¬´{display_text_confirm}¬ª")
        if parsed_tags_list:
            message_parts.append(f"–¢–µ–≥–∏: {', '.join([f'#{t}' for t in parsed_tags_list])}")
        message_for_user = "\n".join(message_parts)

        print(f"LOGIC: –ó–±–µ—Ä–µ–∂–µ–Ω–æ {entry_type_for_db} –¥–ª—è user {user_id}. ID: {new_entry.id}, –¢–µ–≥–∏: {tags_str_for_db}")
        return created_entry_obj, message_for_user, parsed_tags_list, text_for_mood_analysis

    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ save_generic_entry_logic ({entry_type_for_db}): {e}")
        import traceback
        traceback.print_exc()
        message_for_user = f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Å—É ({display_entry_type_for_msg})."
        return None, message_for_user, None, None
    finally:
        session.close()


def create_task_logic(
        user_id: int,
        description: str,
        default_priority: int
) -> Task | None:
    """
    –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –æ–ø–∏—Å–æ–º —Ç–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç Task –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏.
    """
    session = db.session
    new_task_id = None
    task_description = None
    try:
        new_task = Task(
            user_id=user_id,
            description=description,
            priority=default_priority,
            created_at=datetime.now(timezone.utc).replace(tzinfo=None)
        )
        session.add(new_task)
        session.commit()
        new_task_id = new_task.id
        task_description = new_task.description
        print(f"LOGIC: –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è ID {new_task_id} –¥–ª—è user {user_id} –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º {default_priority}")
        return new_task_id, task_description
    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ create_task_logic: {e}")
        import traceback
        traceback.print_exc()
        return None, None
    finally:
        session.close()


def set_task_priority_logic(
        user_id: int,
        task_id: int,
        priority_value: int
) -> tuple[Task | None, str | None, int | None]:
    """
    –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç.
    –ü–æ–≤–µ—Ä—Ç–∞—î: (
    –æ–±'—î–∫—Ç Task | None, –æ–ø–∏—Å –∑–∞–≤–¥–∞–Ω–Ω—è str | None,
    –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç int | None
    ).
    """
    session = db.session
    task_description = None
    actual_priority_set = None
    task = None
    try:
        task = session.query(Task).filter_by(id=task_id, user_id=user_id).first()
        if not task:
            return None, "–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", None

        task.priority = priority_value
        session.commit()
        task_description = task.description
        actual_priority_set = task.priority
        return task, task_description, actual_priority_set
    except Exception as e:
        session.rollback()
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ set_task_priority_logic –¥–ª—è task_id {task_id}: {e}")
        return None, f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É: {e}", None
    finally:
        session.close()


def get_active_tasks_page_logic(
        user_id: int,
        page: int,
        page_size: int
) -> tuple[list[Task], int, int]:
    """
    –û—Ç—Ä–∏–º—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö (–Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö) –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –°–æ—Ä—Ç—É—î –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (—Å–ø–∞–¥–∞–Ω–Ω—è), –ø–æ—Ç—ñ–º –∑–∞ ID (–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è).
    –ü–æ–≤–µ—Ä—Ç–∞—î: (
    —Å–ø–∏—Å–æ–∫ –∑–∞–≤–¥–∞–Ω—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ,
    –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å,
    –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    ).
    """
    session = db.session
    tasks_on_page = []
    total_active_tasks = 0
    num_pages = 0
    try:
        offset = page * page_size

        tasks_query_for_page = session.query(Task).filter_by(
            user_id=user_id,
            completed=False
        ).order_by(Task.priority.desc(),
                   Task.id.asc()).offset(offset).limit(page_size)
        tasks_on_page = tasks_query_for_page.all()

        total_active_tasks_query = session.query(Task).filter_by(
            user_id=user_id,
            completed=False
        )
        total_active_tasks = total_active_tasks_query.count()

        if total_active_tasks > 0:
            num_pages = (total_active_tasks + page_size - 1) // page_size
        if (num_pages == 0 and total_active_tasks > 0):
            num_pages = 1

        print(
            f"LOGIC: get_active_tasks_page - User {user_id}, "
            f"Page {page}, PageSize {page_size}. "
            f"Found {len(tasks_on_page)} tasks on page, "
            f"Total active: {total_active_tasks}, "
            f"NumPages: {num_pages}"
        )
        return tasks_on_page, total_active_tasks, num_pages

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_active_tasks_page_logic –¥–ª—è user {user_id}: {e}")
        return [], 0, 0
    finally:
        session.close()


def get_paginated_entries_logic(
        user_id: int,
        page: int,
        page_size: int,
        model_to_query: db.Model,
        tag_filter: str | None = None,
        entry_type_filter: str | None = None
) -> tuple[list, int, int]:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞–ø–∏—Å—ñ–≤ (JournalEntry –∞–±–æ MoodEntry)
    –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.
    """
    session = db.session
    entries_on_page = []
    total_filtered_entries = 0
    num_pages = 0

    try:
        query = session.query(model_to_query).filter_by(user_id=user_id)

        if tag_filter and hasattr(model_to_query, 'tags_str'):
            query = query.filter(model_to_query.tags_str.ilike(f"%{tag_filter}%"))

        if (model_to_query == JournalEntry
                and entry_type_filter
                and hasattr(model_to_query,
                            'entry_type'
                            )):
            query = query.filter(model_to_query.entry_type == entry_type_filter)

        query = query.order_by(model_to_query.created_at.desc())

        total_filtered_entries = query.count()

        offset = page * page_size
        entries_on_page = query.offset(offset).limit(page_size).all()

        if total_filtered_entries > 0:
            num_pages = (total_filtered_entries + page_size - 1) // page_size
        if num_pages == 0 and total_filtered_entries > 0 :
            num_pages = 1

        print(f"LOGIC: get_paginated_entries - User {user_id}, "
              f"Model {model_to_query.__name__}, Page {page}, "
              f"Tag '{tag_filter}', Type '{entry_type_filter}'. "
              f"Found {len(entries_on_page)} on page, "
              f"Total: {total_filtered_entries}, "
              f"NumPages: {num_pages}")
        return entries_on_page, total_filtered_entries, num_pages

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_paginated_entries_logic –¥–ª—è user {user_id}, "
              f"model {model_to_query.__name__}: {e}")
        return [], 0, 0
    finally:
        session.close()


def get_statistics_logic(user_id: int) -> dict:
    # """
    # –ó–±–∏—Ä–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞–≤–¥–∞–Ω–Ω—è, Pomodoro).
    # –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.
    # """
    stats_data = {}
    session = db.session
    try:
        now_utc = datetime.now(timezone.utc)
        today_start_utc = now_utc.replace(hour=0, minute=0, second=0, microsecond=0)
        week_start_utc = today_start_utc - timedelta(days=now_utc.weekday())
        month_start_utc = today_start_utc.replace(day=1)

        stats_data['tasks_today'] = session.query(func.count(Task.id)).filter(
            Task.user_id == user_id, Task.completed.is_(True),
            Task.completed_at >= today_start_utc
        ).scalar() or 0
        stats_data['tasks_week'] = session.query(func.count(Task.id)).filter(
            Task.user_id == user_id, Task.completed.is_(True),
            Task.completed_at >= week_start_utc
        ).scalar() or 0
        stats_data['tasks_month'] = session.query(func.count(Task.id)).filter(
            Task.user_id == user_id, Task.completed.is_(True),
            Task.completed_at >= month_start_utc
        ).scalar() or 0

        stats_data['total_pomodoros_today'] = session.query(
            func.count(PomodoroSession.id)).filter(
            PomodoroSession.user_id == user_id,
            PomodoroSession.status == 'completed',
            PomodoroSession.session_type == 'work',
            PomodoroSession.end_time >= today_start_utc
        ).scalar() or 0
        stats_data['total_pomodoros_week'] = session.query(
            func.count(PomodoroSession.id)).filter(
            PomodoroSession.user_id == user_id,
            PomodoroSession.status == 'completed',
            PomodoroSession.session_type == 'work',
            PomodoroSession.end_time >= week_start_utc
        ).scalar() or 0
        stats_data['total_pomodoros_month'] = session.query(
            func.count(PomodoroSession.id)).filter(
            PomodoroSession.user_id == user_id,
            PomodoroSession.status == 'completed',
            PomodoroSession.session_type == 'work',
            PomodoroSession.end_time >= month_start_utc
        ).scalar() or 0

        # Pomodoro –ø–æ –∑–∞–≤–¥–∞–Ω–Ω—è—Ö
        stats_data['completed_pomodoros_per_task'] = session.query(
            Task.description, func.count(PomodoroSession.id)
        ).join(PomodoroSession, PomodoroSession.task_id == Task.id) \
            .filter(PomodoroSession.user_id == user_id,
                    PomodoroSession.status == 'completed',
                    PomodoroSession.session_type == 'work') \
            .group_by(Task.id, Task.description) \
            .order_by(func.count(PomodoroSession.id).desc()).limit(5).all()

        # –ü–µ—Ä–µ—Ä–≤–∞–Ω—ñ Pomodoro
        stopped_sessions_week_q = session.query(
            PomodoroSession.start_time, PomodoroSession.end_time
        ).filter(
            PomodoroSession.user_id == user_id,
            PomodoroSession.status == 'stopped',
            PomodoroSession.session_type == 'work',
            PomodoroSession.end_time >= week_start_utc,
            PomodoroSession.start_time.isnot(None),
            PomodoroSession.end_time.isnot(None)
        ).all()

        stats_data['stopped_pom_count_week'] = len(stopped_sessions_week_q)
        total_actual_stopped_duration_week = timedelta()
        for start, end in stopped_sessions_week_q:
            total_actual_stopped_duration_week += (end - start)
            stats_data['total_stopped_minutes_week'] = int(
                total_actual_stopped_duration_week.total_seconds() // 60
            )

        print(f"LOGIC: –ó—ñ–±—Ä–∞–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è user {user_id}")
        return stats_data

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_statistics_logic –¥–ª—è user {user_id}: {e}")
        return {}
    finally:
        session.close()
